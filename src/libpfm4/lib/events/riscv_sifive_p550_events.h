/*
 * =============================================================================
 *
 * Copyright (c) 2025 BSC
 * All rights reserved
 *
 * This file contains BSC proprietary and confidential information and has
 * been developed by BSC within the EPI-SGA1 Project (GA 826647).
 * The permission rights for this file are governed by the EPI Grant Agreement
 * and the EPI Consortium Agreement.
 *
 * ===============================[ INFORMATION ]===============================
 *
 * Author(s)  : Rafel Albert Bros Esqueu
 * Contact(s) : rafel.brosesqueu@bsc.es
 */

static const riscv_entry_t riscv_sifive_p550_pe[] = {
  /* INSTRUCTION group events */
  {.name = "EXCEPTION_TAKEN",
  .code = 0x100,
  .desc = "Counts exceptions taken"},
  {.name = "INTEGER_LOAD_RETIRED",
  .code = 0x200,
  .desc = "Counts integer load instructions retired"},
  {.name = "INTEGER_STORE_RETIRED",
  .code = 0x400,
  .desc = "Counts integer store instructions retired"},
  {.name = "ATOMIC_MEMORY_RETIRED",
  .code = 0x800,
  .desc = "Counts atomic memory instructions retired"},
  {.name = "SYSTEM_INSTRUCTION_RETIRED",
  .code = 0x1000,
  .desc = "Counts system instructions retired (CSR, WFI, MRET, etc.)"},
  {.name = "INTEGER_ARITHMETIC_RETIRED",
  .code = 0x2000,
  .desc = "Counts integer arithmetic instructions retired"},
  {.name = "CONDITIONAL_BRANCH_RETIRED",
  .code = 0x4000,
  .desc = "Counts conditional branch instructions retired"},
  {.name = "JAL_INSTRUCTION_RETIRED",
  .code = 0x8000,
  .desc = "Counts jump-and-link instructions retired"},
  {.name = "JALR_INSTRUCTION_RETIRED",
  .code = 0x10000,
  .desc = "Counts indirect jump instructions (JALR) retired"},
  {.name = "INTEGER_MULTIPLICATION_RETIRED",
  .code = 0x20000,
  .desc = "Counts integer multiplication instructions retired"},
  {.name = "INTEGER_DIVISION_RETIRED",
  .code = 0x40000,
  .desc = "Counts integer division instructions retired"},
  {.name = "FP_LOAD_RETIRED",
  .code = 0x80000,
  .desc = "Counts floating-point load instructions retired"},
  {.name = "FP_STORE_RETIRED",
  .code = 0x100000,
  .desc = "Counts floating-point store instructions retired"},
  {.name = "FP_ADD_RETIRED",
  .code = 0x200000,
  .desc = "Counts floating-point add instructions retired"},
  {.name = "FP_MUL_RETIRED",
  .code = 0x400000,
  .desc = "Counts floating-point multiply instructions retired"},
  {.name = "FP_MULADD_RETIRED",
  .code = 0x800000,
  .desc = "Counts floating-point fused multiply-add instructions retired"},
  {.name = "FP_DIV_SQRT_RETIRED",
  .code = 0x1000000,
  .desc = "Counts floating point divide or square root instructions retired"},
  {.name = "OTHER_FP_RETIRED",
  .code = 0x2000000,
  .desc = "Counts other floating-point instructions retired"},
  /* MEMORY group events */
  {.name = "ICACHE_MISS",
  .code = 0x102,
  .desc = "Counts instruction cache misses"},
  {.name = "DCACHE_MISS",
  .code = 0x202,
  .desc = "Counts data cache misses"},
  {.name = "DCACHE_RELEASE",
  .code = 0x402,
  .desc = "Counts writeback requests from the data cache"},
  {.name = "ITLB_MISS",
  .code = 0x802,
  .desc = "Counts Instruction TLB misses caused by instruction address translation requests"},
  {.name = "DTLB_MISS",
  .code = 0x1002,
  .desc = "Counts Data TLB misses caused by data address translation requests"},
  {.name = "UTLB_MISS",
  .code = 0x2002,
  .desc = "Counts Unified TLB misses caused by address translation requests"},
  {.name = "UTLB_HIT",
  .code = 0x4002,
  .desc = "Counts Unified TLB hits for address translation requests"},
  {.name = "PTE_CACHE_MISS",
  .code = 0x8002,
  .desc = "Counts Page Table Entry cache misses"},
  {.name = "PTE_CACHE_HIT",
  .code = 0x10002,
  .desc = "Counts Page Table Entry cache hits"},
  /* MICROARCHITECTURE group events */
  {.name = "ADDRESSGEN_INTERLOCK",
  .code = 0x101,
  .desc = "Counts cycles with an address-generation interlock"},
  {.name = "LONGLATENCY_INTERLOCK",
  .code = 0x201,
  .desc = "Counts cycles with a long-latency interlock"},
  {.name = "CSR_INTERLOCK",
  .code = 0x401,
  .desc = "Counts cycles with a CSR interlock"},
  {.name = "ICACHE_BLOCKED",
  .code = 0x801,
  .desc = "Counts cycles in which the instruction cache was not able to provide an instruction"},
  {.name = "DCACHE_BLOCKED",
  .code = 0x1001,
  .desc = "Counts cycles in which the data cache blocked an instruction"},
  {.name = "BRANCH_DIRECTION_MISPREDICTION",
  .code = 0x2001,
  .desc = "Counts mispredictions of conditional branch direction (taken/not taken)"},
  {.name = "BRANCH_TARGET_MISPREDICTION",
  .code = 0x4001,
  .desc = "Counts mispredictions of the target PC of control-flow instructions"},
  {.name = "PIPELINE_FLUSH",
  .code = 0x8001,
  .desc = "Counts flushes of the core pipeline. Common causes include fence.i and CSR accesses"},
  {.name = "REPLAY",
  .code = 0x10001,
  .desc = "Counts instruction replays"},
  {.name = "INTEGER_MUL_DIV_INTERLOCK",
  .code = 0x20001,
  .desc = "Counts cycles with a multiply or divide interlock"},
  {.name = "FP_INTERLOCK",
  .code = 0x40001,
  .desc = "Counts cycles with a floating-point interlock"},
  /* CYCLE and INSTRUCTION COUNT group events */
  {.name = "CORE_CLOCK_CYCLES",
  .code = 0x165,
  .desc = "Counts core clock cycles"},
  {.name = "INSTRUCTIONS_RETIRED",
  .code = 0x265,
  .desc = "Counts instructions retired"},
